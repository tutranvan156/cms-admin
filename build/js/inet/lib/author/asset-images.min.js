/**
 * #PACKAGE: author
 * #MODULE: asset-images
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Copyright (c) 2018 iNet Solutions Corp.,
 * Created by Nguyen Ba Chi Cong<nbccong@inetcloud.vn>
 *         on 11:56 25/09/2018.
 * -------------------------------------------
 * @project cms-admin
 * @author nbchicong
 * @file AssetImages.ts
 */
$(function () {
    var AssetImages = /** @class */ (function (_super) {
        __extends(AssetImages, _super);
        // @ts-ignore
        function AssetImages() {
            var _this = this;
            _this.id = 'asset-images-wg';
            _this.module = 'media';
            _this.resourceRoot = iNet.resources.cmsadmin;
            _this.folderId = 'asset-images-folder';
            _this.listId = 'file-list';
            _this.pagingId = 'paging-toolbar';
            _this.itemTpl = 'image-item-tpl';
            _this.params = {};
            _this.submitter = {};
            _this.select = false;
            _this.folder = null;
            _this.store = new Hashtable();
            _this.toolbar = {
                UPLOAD: $('#asset-images-upload'),
                BACK: $('#asset-images-back'),
                SELECT: $('#asset-images-select')
            };
            _this.form = {
                INPUT_UPLOAD: $('#asset-inp-upload-image')
            };
            _this.assetFolder = new iNet.ui.author.AssetFolder({ id: _this.folderId });
            _this.paging = new iNet.ui.common.PagingToolbar({
                id: _this.pagingId,
                url: AssetAPI.URL.LIST,
                params: {
                    type: CMSConfig.ASSET_TYPE_IMAGE,
                    order: '-created'
                },
                idProperty: 'uuid'
            });
            // @ts-ignore
            _this.init();
            _this = _super.call(this) || this;
            _this.assetFolder.on('change', function (folder) {
                _this.load(folder);
            });
            _this.assetFolder.on('loaded', function (folder) {
                _this.load(folder);
            });
            _this.getPaging().on('load', function (results) {
                _this.getStore().clear();
                if (results.type !== CMSConfig.TYPE_ERROR) {
                    _this.render(results.items || []);
                }
                FormUtils.showButton(_this.toolbar.SELECT, _this.isSelect());
            });
            _this.toolbar.BACK.on('click', function () {
                _this.hide();
                _this.fireEvent('back', _this);
            });
            _this.toolbar.UPLOAD.on('click', function () {
                _this.form.INPUT_UPLOAD.trigger('click');
            });
            _this.toolbar.SELECT.on('click', function () {
            });
            _this.form.INPUT_UPLOAD.on('change', function (event) {
                _this.filesUpload = event.currentTarget.files;
                _this.upload();
            });
            _this.getListEl().on('click', '[data-action="remove"]', function (event) {
                var thisEl = $(event.currentTarget);
                var fileEl = thisEl.closest('.file');
                if (fileEl.length > 0) {
                    if (fileEl.prop('id')) {
                        var file = get(fileEl.prop('id'), _this.getStore());
                        var dialog_1 = _this.confirmDlg(_this.getText('delete_file', 'media'), _this.getText('confirm_del_file', 'media'), function () {
                            dialog_1.hide();
                            AssetAPI.remove(dialog_1.getData(), function (result) {
                                if (result.type !== CMSConfig.TYPE_ERROR) {
                                    fileEl.remove();
                                    pop(result, _this.getStore());
                                }
                            });
                        });
                        dialog_1.setTitle('<i class="fa fa-times-circle-o red"></i> ' + _this.getText('delete_file'));
                        dialog_1.setData({ folder: file.folder, file: 1, uuid: fileEl.prop('id') });
                        dialog_1.show();
                    }
                }
            });
            return _this;
        }
        AssetImages.prototype.init = function () {
            if (this.getEl().length <= 0) {
                throw new Error('#Asset Image > Element is not found with id {' + this.getId() + '}!');
            }
        };
        AssetImages.prototype.getId = function () {
            return this.id;
        };
        AssetImages.prototype.getEl = function () {
            return $('#' + this.getId());
        };
        AssetImages.prototype.getListEl = function () {
            return $('#' + this.listId);
        };
        AssetImages.prototype.getPaging = function () {
            return this.paging;
        };
        AssetImages.prototype.setStore = function (data) {
            this.store = data;
        };
        AssetImages.prototype.getStore = function () {
            return this.store;
        };
        AssetImages.prototype.setSelect = function (select) {
            this.select = select;
            this.toggleSelect();
        };
        AssetImages.prototype.isSelect = function () {
            return this.select;
        };
        AssetImages.prototype.toggleSelect = function () {
            if (this.isSelect()) {
                this.getEl().addClass('selector');
            }
            else {
                this.getEl().removeClass('selector');
            }
        };
        AssetImages.prototype.setFolder = function (folder) {
            this.folder = folder;
        };
        AssetImages.prototype.getFolder = function () {
            return this.folder || this.assetFolder.getFirst();
        };
        AssetImages.prototype.setParams = function (data) {
            this.params = data;
            this.params.order = '-created';
        };
        AssetImages.prototype.getParams = function () {
            return this.params || {
                type: CMSConfig.ASSET_TYPE_IMAGE,
                category: this.getFolder(),
                order: '-created'
            };
        };
        AssetImages.prototype.load = function (folder) {
            if (folder) {
                this.setFolder(folder);
            }
            this.getPaging().setParams({
                type: CMSConfig.ASSET_TYPE_IMAGE,
                category: this.getFolder(),
                order: '-created'
            });
            this.getPaging().load();
        };
        AssetImages.prototype.render = function (items) {
            var _this = this;
            this.getListEl().empty();
            (items || []).forEach(function (item) {
                push(item, _this.getStore());
                _this.getListEl().append(_this.renderItem(item));
            });
            this.toggleSelect();
        };
        AssetImages.prototype.renderItem = function (item) {
            return iNet.Template.parse(this.itemTpl, item);
        };
        AssetImages.prototype.preUpload = function (files) {
            var _this = this;
            readFiles(0, files, function (data) {
                push(data, _this.getStore());
                _this.getListEl().append(_this.renderItem(data));
            });
        };
        AssetImages.prototype.upload = function () {
            var _this = this;
            if (this.filesUpload.length > 0) {
                this.preUpload(this.filesUpload);
                var _loop_1 = function (idx) {
                    var file = this_1.filesUpload.item(idx);
                    uploadSingle(idx, file, this_1.submitter, {
                        index: idx,
                        params: {
                            type: CMSConfig.ASSET_TYPE_IMAGE,
                            category: this_1.getFolder()
                        },
                        callback: function (result, index) {
                            console.log('callback index ', idx);
                            if (result.type !== CMSConfig.TYPE_ERROR) {
                                var elements = result.elements || [];
                                if (elements.length > 0) {
                                    var item = elements[0];
                                    var curEl = $('#' + file.id);
                                    pop(file, _this.getStore());
                                    push(item, _this.getStore());
                                    curEl.prop('id', item.id);
                                    curEl.find('img').attr('src', item.src);
                                    // this.renderItem(elements[0]);
                                }
                            }
                            _this.filesUpload = null;
                        },
                        onProgress: function (value, index) {
                            getProgressElByIndex(idx).css({ width: value + '%' });
                        },
                        onComplete: function (e, index) {
                            getProgressElByIndex(index).hide();
                        },
                        onError: function (e, index) {
                            getProgressElByIndex(index).hide();
                        }
                    });
                };
                var this_1 = this;
                for (var idx = 0; idx < this.filesUpload.length; idx++) {
                    _loop_1(idx);
                }
            }
        };
        return AssetImages;
    }(iNet.ui.WidgetExt));
    /**
     * @param {Number} index
     * @param {FileList} files
     * @param {Function} callback
     */
    function readFiles(index, files, callback) {
        var reader = new FileReader();
        reader.onload = function () {
            callback && callback(renderPreviewData(index, reader.result));
            if (index < files.length - 1) {
                readFiles(index++, files, callback);
            }
        };
        reader.readAsDataURL(files.item(index));
    }
    /**
     * @param {Number} index
     * @param {File} file
     * @param {Object} requests
     * @param {Object} options
     */
    function uploadSingle(index, file, requests, options) {
        if (file) {
            var fd = new FormData();
            fd.append(file.name, file);
            for (var key in options.params) {
                if (options.params.hasOwnProperty(key)) {
                    fd.append(key, options.params[key]);
                }
            }
            requests[getRequestByIndex(index)] = AssetAPI.upload(fd, options);
        }
    }
    function renderPreviewData(index, data) {
        return {
            id: iNet.generateId(),
            src: data,
            index: index
        };
    }
    /**
     * @param {Number} index
     * @returns {string}
     */
    function getRequestByIndex(index) {
        return 'upload-request-' + index;
    }
    /**
     * @param {Number} index
     * @returns {jQuery|HTMLElement}
     */
    function getProgressElByIndex(index) {
        return $('#upload-progress-' + index);
    }
    /**
     * @param {Array} items
     * @param {Hashtable} store
     */
    function pushAll(items, store) {
        items.forEach(function (item) {
            if (!item.id) {
                item.id = item.uuid;
            }
            push(item, store);
        });
    }
    /**
     * @param {Object} item
     * @param {Hashtable} store
     */
    function push(item, store) {
        if (!item.id) {
            item.id = item.uuid;
        }
        pop(item, store);
        item.src = CMSUtils.getMediaPath(item, false);
        store.put(item.id, item);
    }
    /**
     * @param {Object} item
     * @param {Hashtable} store
     */
    function pop(item, store) {
        if (!item.id) {
            item.id = item.uuid;
        }
        if (contains(item, store)) {
            store.remove(item.id);
        }
    }
    /**
     * @param {String} key
     * @param {Hashtable} store
     */
    function get(key, store) {
        return store.get(key);
    }
    /**
     * @param {Object} item
     * @param {Hashtable} store
     */
    function contains(item, store) {
        if (!item.id) {
            item.id = item.uuid;
        }
        return store.containsKey(item.id);
    }
    // export class
    iNet.ui.author.AssetImages = AssetImages;
});
