var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * #PACKAGE: author
 * #MODULE: asset-documents
 */
$(function () {
    var BasicSearch = /** @class */ (function (_super) {
        __extends(BasicSearch, _super);
        // @ts-ignore
        function BasicSearch() {
            var _this = this;
            _this.id = 'documents-basic-search';
            _this.folderId = 'asset-document-folder';
            _this.url = iNet.getPUrl('cms/asset/list');
            _this.folder = null;
            _this.toolbar = {};
            _this.formSearch = {};
            _this.assetFolder = new iNet.ui.author.AssetFolder({
                id: _this.folderId,
                assetType: CMSConfig.ASSET_TYPE_DOCUMENT,
                toolbar: {
                    CREATE: $('#asset-document-folder-btn-create'),
                    EDIT: $('#asset-document-folder-btn-edit'),
                    REMOVE: $('#asset-document-folder-btn-remove'),
                    PUBLISHED: $('#asset-document-folder-btn-published'),
                    UNPUBLISHED: $('#asset-document-folder-btn-unpublished')
                }
            });
            // @ts-ignore
            _this.init();
            _this = _super.call(this) || this;
            return _this;
        }
        BasicSearch.prototype.init = function () { };
        BasicSearch.prototype.intComponent = function () {
            var _this = this;
            this.toolbar = {
                BACK: this.getEl().find('#asset-documents-back'),
                UPLOAD: this.getEl().find('#asset-documents-upload'),
                SELECT: this.getEl().find('#asset-documents-select'),
            };
            this.formSearch = {
                INPUT: this.getEl().find('.grid-search-input'),
                BTN_SEARCH: this.getEl().find('.grid-search-btn')
            };
            this.toolbar.BACK.on('click', function () {
                _this.fireEvent('back');
            });
            this.toolbar.UPLOAD.on('click', function () {
                _this.fireEvent('upload');
            });
            this.toolbar.SELECT.on('click', function () {
                _this.fireEvent('select');
            });
            this.assetFolder.on('change', function (folder) {
                _this.setFolder(folder);
                _this.formSearch.BTN_SEARCH.trigger('click');
            });
            this.assetFolder.on('loaded', function (folder) {
                _this.setFolder(folder);
                _this.formSearch.BTN_SEARCH.trigger('click');
            });
        };
        BasicSearch.prototype.getUrl = function () {
            return this.url;
        };
        BasicSearch.prototype.setFolder = function (folder) {
            this.folder = folder;
        };
        BasicSearch.prototype.getFolder = function () {
            return this.folder;
        };
        BasicSearch.prototype.getData = function () {
            return {
                type: CMSConfig.ASSET_TYPE_DOCUMENT,
                category: this.getFolder(),
                pageSize: CMSConfig.PAGE_SIZE,
                pageNumber: 0,
                keyword: this.formSearch.INPUT.val() || '',
                order: '-created'
            };
        };
        return BasicSearch;
    }(iNet.ui.grid.Search));
    var AssetDocuments = /** @class */ (function (_super) {
        __extends(AssetDocuments, _super);
        // @ts-ignore
        function AssetDocuments() {
            var _this = this;
            _this.id = 'asset-documents-wg';
            _this.gridID = 'list-documents';
            _this.remote = true;
            _this.firstLoad = false;
            _this.module = 'media';
            _this.resourceRoot = iNet.resources.cmsadmin;
            _this.submitter = {};
            _this.filesUpload = new Hashtable();
            _this.selected = [];
            _this.url = {
                list: iNet.getPUrl('cms/asset/list')
            };
            _this.form = {
                INPUT_UPLOAD: $('#asset-inp-upload')
            };
            _this.dataSource = new iNet.ui.grid.DataSource({
                columns: [{
                        type: 'selection',
                        align: 'center',
                        width: 30
                    }, {
                        property: 'brief',
                        label: 'Tên',
                        type: 'text',
                        sortable: true,
                        renderer: function (value, record) {
                            if (record.preview) {
                                return '<div class="progress">\n' +
                                    '  <div id="upload-progress-' + record.index + '" class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0">\n' +
                                    '   ' + value + '(<i class="upload-' + record.index + '-percent">0%</i>)\n' +
                                    '  </div>\n' +
                                    '</div>';
                            }
                            return value;
                        }
                    }, {
                        property: 'size',
                        label: 'Dung lượng',
                        type: 'text',
                        sortable: true,
                        width: 220,
                        renderer: function (v) {
                            return FileUtils.getSize(v);
                        }
                    }, {
                        property: 'created',
                        label: 'Ngày tải lên',
                        type: 'text',
                        sortable: true,
                        width: 120,
                        renderer: function (v) {
                            // @ts-ignore
                            return new Date(v).format(iNet.dateFormat);
                        }
                    }, {
                        label: '',
                        type: 'action',
                        align: 'center',
                        buttons: [{
                                text: _this.getText('delete', 'link'),
                                icon: 'icon-trash',
                                labelCls: 'label label-danger',
                                fn: function (record) {
                                    var dialog = _this.confirmDlg(_this.getText('delete_file'), _this.getText('confirm_del_file'), function () {
                                        AssetAPI.remove(dialog.getData(), function (result) {
                                            if (result.type !== CMSConfig.TYPE_ERROR) {
                                                _this.success(_this.getText('delete_file'), _this.getText('del_file_success'));
                                                _this.removeRecord(result);
                                            }
                                            else {
                                                _this.error(_this.getText('delete_file'), _this.getText('del_file_unsuccess'));
                                            }
                                        });
                                        dialog.hide();
                                    });
                                    dialog.setTitle('<i class="fa fa-times-circle-o red"></i> ' + _this.getText('delete_file'));
                                    dialog.show();
                                    dialog.setData({ uuid: record.uuid, folder: record.folder, file: 1 });
                                }
                            }]
                    }],
                delay: 250
            });
            _this.basicSearch = BasicSearch;
            // @ts-ignore
            _this.init();
            _this = _super.call(this) || this;
            _this.getGrid().on('selectionchange', function (sm) {
                _this.selected = sm.getSelection();
            });
            _this.getGrid().getQuickSearch().on('back', function () {
                _this.hide();
                _this.fireEvent('back', _this);
            });
            _this.getGrid().getQuickSearch().on('upload', function () {
                _this.filesUpload.clear();
                _this.form.INPUT_UPLOAD.trigger('click');
            });
            _this.getGrid().getQuickSearch().on('select', function () {
                _this.fireEvent('selected', _this.selected, _this);
            });
            _this.form.INPUT_UPLOAD.on('change', function (event) {
                var files = event.currentTarget.files;
                if (files.length < 1) {
                    return;
                }
                for (var i = 0; i < files.length; i++) {
                    var file = files.item(i);
                    _this.preUpload(file, i);
                }
                _this.upload();
            });
            return _this;
        }
        AssetDocuments.prototype.init = function () {
            if (this.getEl().length <= 0) {
                throw new Error('#Asset Document > Element is not found with id {' + this.getId() + '}!');
            }
        };
        AssetDocuments.prototype.getId = function () {
            return this.id;
        };
        AssetDocuments.prototype.getEl = function () {
            return $('#' + this.getId());
        };
        AssetDocuments.prototype.getFolder = function () {
            return this.getGrid().getQuickSearch().getFolder();
        };
        AssetDocuments.prototype.preUpload = function (item, index) {
            var data = {
                uuid: iNet.generateId(),
                brief: item.name,
                size: item.size,
                created: new Date().getTime(),
                preview: true,
                index: index
            };
            item.id = data.uuid;
            this.filesUpload.put(data.uuid, data);
            this.insert(data);
        };
        AssetDocuments.prototype.upload = function () {
            var _this = this;
            if (this.filesUpload.size() > 0) {
                var idx_1 = 0;
                // @ts-ignore
                this.filesUpload.each(function (key, file) {
                    uploadSingle(idx_1, file, _this.submitter, {
                        index: idx_1,
                        params: {
                            type: CMSConfig.ASSET_TYPE_DOCUMENT,
                            category: _this.getFolder()
                        },
                        callback: function (result, index) {
                            if (result.type !== CMSConfig.TYPE_ERROR) {
                                var elements = result.elements || [];
                                if (elements.length > 0) {
                                    var item = elements[0];
                                    $('#' + file.id).prop('id', item.uuid);
                                    _this.update(item);
                                    getProgressElByIndex(index).hide();
                                }
                            }
                        },
                        onProgress: function (value, index) {
                            console.log('progress index ', index, idx_1);
                            var progressBarEl = getProgressElByIndex(index);
                            progressBarEl.attr('aria-valuenow', value);
                            progressBarEl.css({ width: value + '%' });
                            progressBarEl.find('.upload-' + index + '-percent').text(value);
                        },
                        onComplete: function (e, index) {
                            getProgressElByIndex(index).hide();
                        },
                        onError: function (e, index) {
                            console.log('error index ', index, idx_1, e);
                            getProgressElByIndex(index).hide();
                        }
                    });
                    idx_1++;
                });
            }
        };
        return AssetDocuments;
    }(iNet.ui.ListAbstract));
    /**
     * @param {Number} index
     * @param {File} file
     * @param {Object} requests
     * @param {Object} options
     */
    function uploadSingle(index, file, requests, options) {
        if (file) {
            var fd = new FormData();
            fd.append(file.name, file);
            for (var key in options.params) {
                if (options.params.hasOwnProperty(key)) {
                    fd.append(key, options.params[key]);
                }
            }
            requests[getRequestByIndex(index)] = AssetAPI.upload(fd, options);
        }
    }
    /**
     * @param {Number} index
     * @returns {string}
     */
    function getRequestByIndex(index) {
        return 'upload-request-' + index;
    }
    /**
     * @param {Number} index
     * @returns {jQuery|HTMLElement}
     */
    function getProgressElByIndex(index) {
        return $('#upload-progress-' + index);
    }
    // export class
    iNet.ui.author.AssetDocuments = AssetDocuments;
});
